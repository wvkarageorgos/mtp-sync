#!/bin/bash
#
# Licensed under the MIT License;
# Copyright (C) 2016 William Karageorgos <wvkarageorgos@gmail.com> 
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
# IN THE SOFTWARE.
#

function USAGE() {
	echo -e "Usage:"
	echo -e "  `basename $0` [OPTION...]"
	echo -e
	echo -e "Synchronizes a device's contents using the MTP protocol via gvfs-mtp"
	echo -e 
	echo -e "Options:"
	echo -e "  -l, --list				List known devices by ID"
	echo -e "  -d, --device DEVICE			Sync a specific device based on device ID"
	echo -e "  -m, --mode MODE			Detection mode (0=auto, 1=gvfs, 2=lsusb)"
	echo -e "  -u, --unmount				Unmount device from gvfs after sync'ing"	
	echo -e "  -n, --noreq				Skip requiments checks"
	echo -e "  -h, --help				This help screen"
	exit
}

function REQ() {
	if [[ "$NOREQ" == "1" ]]; then
		return
	fi
	(which --help >/dev/null || false) 2>/dev/null
	if [[ "$?" != "0" ]]; then
		echo -e "\`which' is required for this program to run. Please installing using one of" >&2
		echo -e "\tyum install which" >&2
		echo -e "\tdnf install which" >&2
		echo -e "\tapt-get install which" >&2
		echo -e "depending on your distribution" >&2
		exit 1
	else
		if ( ! which --skip-alias --skip-functions $1 >/dev/null 2>&1 ); then
			echo -e "\`$2' is required for this program to run. Please installing using one of" >&2
			echo -e "\tyum install $2" >&2
			echo -e "\tdnf install $2" >&2
			echo -e "\tapt-get install $2" >&2
			echo -e "depending on your distribution" >&2
			exit 1
		fi
	fi
}

function MTPCP() {
	(
	IFS=$'\n'
	for i in $(gvfs-ls -h "$1" 2>/dev/null); do
		if [[ ! -d "$SYNCPATH/$2" ]]; then
			mkdir -p "$SYNCPATH/$2"
		fi
		if [[ ! -e "$SYNCPATH/$2/$i" ]]; then
			gvfs-copy --preserve -p "$1/$i" "$SYNCPATH/$2/$i" 2>/dev/null
		fi
	done
	)
	for i in $(gvfs-ls -h -a directory "$1" 2>/dev/null | grep '(directory)' | awk '{$NF="";$(NF-1)="";print $0}' | sed -e 's/[[:space:]]*$//'); do
		(MTPCP "$1/$i" "$2/$i")
	done
}

# initialization
CONF=~/.mtp-sync
if [[ ! -d $CONF ]]; then
	mkdir -p $CONF
fi
CONFDEV=$CONF/known_devices
MODE=0 # 0=auto, 1=gvfs, 2=lsusb
DEVID=""
DEVNAME=""
SYNCBASE=""
UNMOUNT=0
if [[ -e $CONF/sync_path ]]; then
	SYNCBASE=`cat $CONF/sync_path`
else
	echo -en "Please enter path to sync devices to [$HOME]: "
	read
	if [[ "$(echo $REPLY|sed -e 's/[[:space:]]*//')" == "" ]]; then
		REPLY="$HOME"
	fi
	SYNCBASE="$REPLY"
	echo $SYNCBASE > $CONF/sync_path
fi
if [[ ! -d "$SYNCBASE" ]]; then
	mkdir -p "$SYNCBASE" >/dev/null 2>&1
	if [[ "$?" != 0 ]]; then
		echo -e "Could not create path to sync devices to. Aborting" >&2
		"rm" -f $CONF/sync_path >dev/null 2>&1
		exit 3
	fi
fi
NOREQ=0

while [[ "$1" != "" ]]; do
	case "$1" in
		-u|--unmount)
			UNMOUNT=1
			shift
			;;
		-l|--list)
			echo -e "Device ID\tDevice Alias"
			echo -e "---------\t------------"
			for i in $(cat $CONFDEV); do
				echo -e "$i\t$(cat $CONF/$i/alias)"
				exit 5
			done
			shift
			;;
		-d|--device)
			DEVID=$2
			if [[ "$DEVID" == "" ]]; then
				echo -e "Missing parameter for device option" >&2
				exit 6
			fi
			shift 2
			;;
		-m|--mode)
			MODE=$2
			if [[ "$MODE" == "" ]]; then
				echo -e "Missing parameter for mode option" >&2
				exit 6
			fi
			shift 2
			;;
		-n|--noreq)
			NOREQ=1
			shift
			;;
		-h|--help) 
			USAGE
			shift
			;;
		*)
			echo -e "Unknown option \`$1' specified" >&2
			exit 4
			;;
	esac
done

case $MODE in
	0);;
	1);;
	2);;
	*) MODE=0;;
esac

# requirements
REQ gvfs-mount gvfs-mtp
REQ gvfs-ls gvfs-mtp
REQ gvfs-copy gvfs-mtp
REQ lsusb usbutils

MTP=""
if [[ "$DEVID" == "" ]]; then
	if [[ "$MODE" == "0" ]]; then
		if [[ -e $CONFDEV ]]; then
			for i in `cat $CONFDEV`;do
				if ( lsusb | grep -q -- $i ); then
					MTP="mtp://[usb:"$( lsusb|grep -- $i|awk '{print $2","$4}'|sed -e 's/://')"]"
					echo -e "Automatically sync'ing known device $i"
					break
				fi
			done
		fi
	fi

	if [[ "$MTP" == "" && "$MODE" != "2" ]]; then
			# select the first MTP device detected by gvfs-mtp
			MTP=$(gvfs-mount -li|grep MTP -A3|grep activation_root|head -n1|sed -e 's/activation_root=//' -e 's/[[:space:]]//g')
			DEVNAME=$(gvfs-mount -li|grep MTP -B1|head -n1|sed -e 's/Volume([0-9]\+): //')
			if [[ "$MTP" != "" ]]; then
				echo -e "Automatically sync'ing device $DEVNAME detected via gvfs"
			fi
	fi
	if [[ "$MTP" == "" ]]; then
			echo "No device detected through gvfs or manual mode requested. Trying lsusb..." >&2
			# manually choose from a list of connected USB devices
			(IFS=$'\n'; j=1; for i in `lsusb`;do echo "$j) $i"; ((j++)); done)
			echo -en "Please enter line number: "; 
			read
			if [[ "$(echo $REPLY|sed -e 's/[[:space:]]*//')" == "" ]]; then
				echo -e "Invalid input. Aborting" >&2
				exit 1
			fi
			MTP="mtp://[usb:"$( (IFS=$'\n'; j=1; for i in `lsusb`;do echo "$j) $i"; ((j++)); done)|egrep -- "^${REPLY}) "|awk '{print $3","$5}'|sed -e 's/://')"]"
			DEVNAME=$( (IFS=$'\n'; j=1; for i in `lsusb`;do echo "$j) $i"; ((j++)); done)|egrep -- "^${REPLY}) "|sed -e 's/.\+ ID ....:.... //')
	fi
else
	MTP="mtp://[usb:"$(lsusb|grep -- $DEVID|awk '{print $2","$4}')"]"
fi

if [[ "$MTP" == "" ]]; then
	echo -e "No device detected. Aborting" >&2
	exit 2
else
	# remove any potential trailing slashes from MTP URI
	MTP="$(echo $MTP|sed -e 's/\/*$//')"
fi

if [[ "$DEVID" == "" ]]; then
	DEVID=$(lsusb | grep -- "$(echo $MTP | sed -e 's/.\+usb://' -e 's/\].*//' -e 's/,/ /'|awk '{print "Bus "$1" Device "$2":"}')" | awk '{print $6}')
fi

if ( ! gvfs-mount -l | grep -q -- $(echo "$MTP"|sed -e 's/\[/\\[/g' -e 's/\]/\\]/g') ); then
	gvfs-mount "$MTP" >/dev/null 2>&1
	if [[ "$?" != "0" ]]; then
		echo -e "Could not access requested device \`$DEVID' using the MTP protocol. Aborting" >&2
		exit 2
	fi
fi

if [[ ! -e $CONFDEV ]]; then
	echo $DEVID >> ${CONFDEV}
	mkdir -p $CONF/$DEVID
else
	if ( ! grep -q -- $DEVID $CONFDEV ); then
		echo $DEVID >> ${CONFDEV}
		mkdir -p $CONF/$DEVID
	fi
fi

if [[ "$(echo $DEVNAME | sed -e 's/[[:space:]]//g')" == "" ]]; then
	DEVNAME="My phone"
fi
if [[ ! -e $CONF/$DEVID/alias ]]; then
	echo -en "Please enter a name for the device [$DEVNAME]: "
	read
	if [[ "$REPLY" == "" ]]; then
		REPLY=$DEVNAME
	fi
	DEVNAME=$REPLY
	echo $DEVNAME #> $CONF/$DEVID/alias
	echo $DEVNAME > $CONF/$DEVID/alias
else
	DEVNAME="$(cat $CONF/$DEVID/alias)"
fi

SYNCPATH="$SYNCBASE/$DEVNAME"
mkdir -p "$SYNCPATH"

if [[ ! -e $CONF/$DEVID/sync_paths ]]; then
	echo -e "Creating first-time sync mapping"
	echo -e "You can change which paths to sync for this device by editing $CONF/$DEVID/user_sync_paths"
	(
cat << EOF
"Download" "Download"
"DCIM" "DCIM"
"Pictures" "Pictures"
"viber/media/Viber Images" "Viber"
"viber/media/Viber Videos" "Viber"
"WhatsApp/Media/WhatsApp Images" "WhatsApp"
"WhatsApp/Media/WhatsApp Video" "WhatsApp"
"WhatsApp/Media/WhatsApp Audio" "WhatsApp"
"WhatsApp/Media/WhatsApp Documents" "WhatsApp"
EOF
	) > $CONF/$DEVID/sync_paths
fi
(
IFS=$'\n'
for i in `gvfs-ls "$MTP" 2>/dev/null`;do
	for j in `seq 1 $(cat $CONF/$DEVID/sync_paths $CONF/$DEVID/user_sync_paths 2>/dev/null | sed -e 's/" *"/" "/g' | sort -u | wc -l)`; do
		eval SRCPATH=(`cat $CONF/1004:61f9/sync_paths|head -n$j|tail -n1`)
		(echo -e "Sync'ing" "\`$MTP/$i/${SRCPATH[0]}'" into "\`${SRCPATH[1]}'")
		(MTPCP "$MTP/$i/${SRCPATH[0]}" "${SRCPATH[1]}")
	done
done
)
if [[ "$UNMOUNT" == "1" ]]; then
	gvfs-mount -u "$MTP"
fi
